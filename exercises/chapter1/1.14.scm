; Exercise 1.14.  Draw the tree illustrating the process generated by the
; count-change procedure of section 1.2.2 in making change for 11 cents. What
; are the orders of growth of the space and number of steps used by this
; process as the amount to be changed increases?

(define (count-change amount)
  (cc amount 5))
(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount (- kinds-of-coins 1))
                 (cc (- amount (first-denomination kinds-of-coins))
                     kinds-of-coins))
        )
  )
)
(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

; number of steps can be determined partly by seeing how may times it calls
; itself.  For every time through the procedure cc, it calls itself twice.  If
;
; Let's try to figure this out...
; (cc 11 5)
; (+ (cc 11 4) (cc -39 5))
; (+ (+ (cc 11 3) (cc -14 5)) 0)
; (+ (cc 11 2) (cc 1 3) 0)
; (+ (+ (cc 11 1) (cc 6 2)) (cc 1 3))
; (+ (+ (+ (cc 11 0) (cc 10 1)) (cc 6 2)) (cc 1 3))

; It's looking really inefficient.  It's going to recalculate stuff over and
; over since there's no iteration.  It's probably exponential with the numbe
; of denominations of coins.  Memory usage is fine though.
